// AUTO GENERATED
//     This code was generated by signalgo add refenreces.
//     Runtime Version : 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     to download signalgo vsix for visual studio go https://marketplace.visualstudio.com/items?itemName=AliVisualStudio.SignalGoExtension
//     support and use signalgo go https://github.com/SignalGo/SignalGo-full-net
// AUTO GENERATED
import 'package:hello_world/ServerProvider/CallbackServices/HelloCallbackClientServiceCallbackService.dart';
import 'package:hello_world/ServerProvider/Runtime/ParameterInfo.dart';
import 'package:hello_world/ServerProvider/Runtime/TypeMode.dart';
import 'package:hello_world/ServerProvider/Runtime/TypeBuilder.dart';
import 'package:hello_world/ServerProvider/SignalGoServerExample.Models/BookInfo.dart';
import 'package:hello_world/ServerProvider/SignalGoServerExample.Models/UserInfo.dart';
class JsonInitializer {
	static void initialize() {
var typeInfo3 = TypeBuilder.make<BookInfo>(TypeMode.Object)
      .addProperty<int>(
          "id",
          TypeMode.Object,
          (BookInfo x) => x.id,
          (BookInfo x, int value) => x.id = value)
.addProperty<String>(
          "details",
          TypeMode.Object,
          (BookInfo x) => x.details,
          (BookInfo x, String value) => x.details = value)
.addProperty<UserInfo>(
          "userInfo",
          TypeMode.Object,
          (BookInfo x) => x.userInfo,
          (BookInfo x, UserInfo value) => x.userInfo = value)

      .createInstance(() => new BookInfo())
      .build();
var typeInfo5 = TypeBuilder.make<List<BookInfo>>(TypeMode.Array)
          .addProperty<BookInfo>("Add", TypeMode.Array, null,
              (List<BookInfo> x, BookInfo value) => x.add(value))
          .addGenericArgument(typeInfo3)
          .createInstance(() => new List<BookInfo>())
          .getTypeFromcreateInstance(() => new List<BookInfo>())
          .build();
var typeInfo7 = TypeBuilder.make<UserInfo>(TypeMode.Object)
      .addProperty<int>(
          "id",
          TypeMode.Object,
          (UserInfo x) => x.id,
          (UserInfo x, int value) => x.id = value)
.addProperty<String>(
          "name",
          TypeMode.Object,
          (UserInfo x) => x.name,
          (UserInfo x, String value) => x.name = value)
.addProperty<int>(
          "age",
          TypeMode.Object,
          (UserInfo x) => x.age,
          (UserInfo x, int value) => x.age = value)
.addPropertyWithInstance<List<BookInfo>>(
          "books",
          TypeMode.Object,
          (UserInfo x) => x.books,
          (UserInfo x, List<BookInfo> value) => x.books = value,
          () => new List<BookInfo>())

      .createInstance(() => new UserInfo())
      .build();
var typeInfo10 = TypeBuilder.make<List<UserInfo>>(TypeMode.Array)
          .addProperty<UserInfo>("Add", TypeMode.Array, null,
              (List<UserInfo> x, UserInfo value) => x.add(value))
          .addGenericArgument(typeInfo7)
          .createInstance(() => new List<UserInfo>())
          .getTypeFromcreateInstance(() => new List<UserInfo>())
          .build();
TypeBuilder.make<HelloCallbackClientServiceCallbackService>(TypeMode.Object)
.addMethod(
          "ReceivedMessage",
          [new ParameterInfo<String>(),new ParameterInfo<String>()],
          (HelloCallbackClientServiceCallbackService x, String name,String family) =>
              x.receivedMessageAsync(name,family))
.createInstance(() => new HelloCallbackClientServiceCallbackService())
      .build();
	}
}
