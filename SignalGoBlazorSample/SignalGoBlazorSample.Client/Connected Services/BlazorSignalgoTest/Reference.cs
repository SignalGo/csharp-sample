// AUTO GENERATED
//     This code was generated by signalgo add refenreces.
//     Runtime Version : 4.6.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     to download signalgo vsix for visual studio go https://marketplace.visualstudio.com/items?itemName=AliVisualStudio.SignalGoExtension
//     support and use signalgo go https://github.com/SignalGo/SignalGo-full-net
// AUTO GENERATED
using System.Threading.Tasks;
using SignalGoBlazorSample.Shared.Models;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http.Headers;
using System.Net.Http;
using System.Text;
using System.ComponentModel;
using BlazorSignalGoTest.ServerServices;
using BlazorSignalGoTest.HttpServices;
using BlazorSignalGoTest.ClientServices;

namespace BlazorSignalGoTest.ServerServices
{
}

namespace BlazorSignalGoTest.StreamServices
{
}

namespace BlazorSignalGoTest.OneWayServices
{
}

namespace BlazorSignalGoTest.HttpServices
{
    /// <summary>
    /// reponse of http request
    /// </summary>
    public class HttpClientResponse
    {
        /// <summary>
        /// status
        /// </summary>
        public HttpStatusCode Status { get; set; } = HttpStatusCode.OK;
        /// <summary>
        /// data of response
        /// </summary>
        public string Data { get; set; }
        /// <summary>
        /// response headers
        /// </summary>
        public HttpResponseHeaders ResponseHeaders { get; set; }
    }

    /// <summary>
    /// a parameter data for method call
    /// </summary>
    public class ParameterInfo
    {
        /// <summary>
        /// type of parameter
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// value of parameter
        /// </summary>
        public string Value { get; set; }
    }

    public class SignalGoBlazorHttpClient
    {
        public HttpRequestHeaders RequestHeaders { get; set; } = new HttpRequestMessage().Headers;

        public async Task<HttpClientResponse> PostAsync(string url, ParameterInfo[] parameterInfoes)
        {
            Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler browserHttpMessageHandler = new Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler();
            using (HttpClient httpClient = new System.Net.Http.HttpClient(browserHttpMessageHandler))
            {
                foreach (KeyValuePair<string, IEnumerable<string>> item in RequestHeaders)
                {
                    httpClient.DefaultRequestHeaders.Add(item.Key, item.Value);
                }

                MultipartFormDataContent form = new MultipartFormDataContent();
                foreach (ParameterInfo item in parameterInfoes)
                {
                    StringContent jsonPart = new StringContent(item.Value.ToString(), Encoding.UTF8, "application/json");
                    jsonPart.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    jsonPart.Headers.ContentDisposition.Name = item.Name;
                    jsonPart.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    form.Add(jsonPart);
                }

                HttpResponseMessage httpresponse = await httpClient.PostAsync(url, form);
                if (!httpresponse.IsSuccessStatusCode)
                {
                    // Unwrap the response and throw as an Api Exception:
                    throw new Exception(await httpresponse.Content.ReadAsStringAsync());
                }
                else
                {
                    httpresponse.EnsureSuccessStatusCode();
                    return new HttpClientResponse() { Data = await httpresponse.Content.ReadAsStringAsync(), ResponseHeaders = httpresponse.Headers, Status = httpresponse.StatusCode };
                }
            }
        }
    }
    public class HelloWorldService
    {
        public HelloWorldService(string serverUrl, SignalGoBlazorHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGoBlazorHttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGoBlazorHttpClient _httpClient;
        public static HelloWorldService Current { get; set; }
        public HttpResponseHeaders ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public async Task<string> LoginAsync(string yourName)
        {
                HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "helloworld/Login", new ParameterInfo[]
                {
                         new ParameterInfo() { Name = nameof(yourName),Value = Newtonsoft.Json.JsonConvert.SerializeObject(yourName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public async Task<System.Collections.Generic.List<SignalGoBlazorSample.Shared.Models.UserInfo>> GetUserInfoesAsync()
        {
                HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "helloworld/GetUserInfoes", new ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoBlazorSample.Shared.Models.UserInfo>>(result.Data);
        }
    }
}

namespace BlazorSignalGoTest.ClientServices
{
}

